#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 100

char stack[MAX], infix[MAX], postfix[MAX];
int top = -1;

void push(char);
char pop();
int IsEmpty();
void inToPost();
void print();
int precedence(char);

int main()
{
    printf("Enter the Infix Expression: ");
    gets(infix);
    //fgets(infix, MAX, stdin);
    inToPost();
    print();
    return 0;
}

void inToPost()
{
    int i, j = 0;
    char next;
    char symbol;
    for (i = 0; i < strlen(infix); i++)
    {
        symbol = infix[i];

        switch (symbol)
        {
        case '(':
            push(symbol);
            break;
        case ')':
            while ((next = pop()) != '(')
                postfix[j++] = next;
            break;
        case '+':
        case '-':
        case '*':
        case '/':
        case '^':
            while (!IsEmpty() && precedence(symbol) <= precedence(stack[top]))
                postfix[j++] = pop();
            push(symbol);
            break;
        default:
            postfix[j++] = symbol;
        }
   }

   while (!IsEmpty())
       postfix[j++] = pop();

   postfix[j] = '\0';
}

void print()
{
    int i = 0;
    printf("The equivalent postfix expression is: ");
    while (postfix[i])
        printf("%c", postfix[i++]);
    printf("\n");
}

void push(char c)
{
    if (top == MAX - 1)
    {
        printf("Stack is full");
        return;
    }
    top++;
    stack[top] = c;
}

char pop()
{
    char c;
    if (top == -1)
    {
        printf("Stack underflow");
        exit(1);
    }
    c = stack[top];
    top--;
    return c;
}

int IsEmpty()
{
    if (top == -1)
        return 1;
    
    return 0;
}

int precedence(char symbol)
{
    switch(symbol)
    {
        case '^': return 3;
        case '/':
        case '*': return 2;
        case '-':
        case '+': return 1;
        default : return 0;
   }
}